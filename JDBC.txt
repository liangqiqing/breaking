  ## 今日内容
	
       1.JDBC继承概念
       2.快速入门
       3.对Jdbc中各个接口和类详解

  ## JDBC:
	* 概念：Java DataBase  Connectivity    java 数据库连接，  java语言操作数据库
	* JDBC本质：其实是官方(sun公司)定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这	      套接口，提供数据库驱动jar包。我们使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。

          #  2. 快速入门：
	 * 步骤： 
	     1. 导入驱动jar包
		 1.复制jar包放到你创建的项目文件里
		 2.右键-->add as Libray
	     2. 注册驱动
	     3. 获取数据库连接对象 Connection
	     4. 定义sql
	     5. 获取执行sql语句的对象 Statement
	     6. 执行sql，结束返回结果
	     7. 处理结果
	     8. 释放资源

     ## 3.详解各个对象：
         1.DriverManager ：驱动管理对象
		    * 功能：
				1.注册驱动：高数程序该使用哪一个数据库驱动jar
				    static void registerDriver(Driver driver):这次与给定的驱动程序DriverManager。
					写代码使用：Class.forName("com.mysql.jdbc.Driver");
					通过查看源码发现：在com.mysql.jdbc.Driver类中存在静态代码块
					static {java.sql.DriverManager.registerDriver(new Driver())}
					注意：mysql之后的驱动jar包可以省略这次驱动的步骤。
				2.获取数据库连接
					* 方法：static Connection getConnection(String url, String user, String password)  
					* 参数：
						* url ：指定连接的路径
							* 语法 ：jdbc:mysql://ip地址(域名):端口号/数据库名称
							* 例子：jdbc:mysql://localhost:3306/mysql
							* 细节：如果连接的是本机mysql服务器，并且端口号是默认的3306，则url可以简写为:jdbc:mysql:///数据库名称
						* user ：用户名
						* password ：密码
         2.Connection ： 数据库连接对象
			1.功能：
				1.获取执行sql的对象
					* Statement createStatement()  
					* PreparedStatement prepareStatement(String sql) 
				2.管理事务：
					* 开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为fales，即开启事务
					* 提交事务：commit() 
					* 回滚 ：rollback()
         3.Statement ： 执行sql的对象
			1.执行sql
				1.boolean execute(String sql)  
				2.int executeUpdate(String sql) 
					*执行DML（insert、update、delete）语句、DDL（create，alter，drop）语句
					* 返回值：影响的行数，可以通过这个影响的行数判断DML语句知否执行成功，返回>0执行成功，反之则失败。
				3.ResultSet executeQuery(String sql) ：执行DQL（select）语句	
         4.resultSet：结果集对象，封装查询结果
			1.next():游标向下一行
			2.getXxx(参数) ：获取数据     如 getString(1); getInt(ip)
				* Xxx：数据类型代表
				* 参数：
				 int：代表列的编号，从一开始。  如 getString(1);
				 string：代表列名称。  如  getInt(ip)
		 
			3.获取数据正确写法
			 while (set.next()){
                System.out.println(set.getInt("ip")+
                        "\t"+set.getString("name")+
                        "\t\t"+set.getInt("meroy"));
            }
		 
		 练习：定义一个方法，查询表的数据将其封装为对象存储在集合，并返回。
			1.定义一个类，变量和表相同
			2.定义方法：public List<类> All(){}
			3.实现方法：select * from 表名;
			
         5.PreparedStatement ：  执行sql的对象
			1.SQL注入问题：在sql拼接时，有一些特殊关键字与字符串的拼接，会造成安全性问题。
			2.解决sql注入问题，使用PreparedStatement对象来解决
			3.预编译的sql：参数使用?占位符
			4.步骤：
				 1. 导入驱动jar包
				 2. 注册驱动
				 3. 获取数据库连接对象 Connection
				 4. 定义sql
						* 注意：参数使用占位符? 如：select * from fu where username = ? and password = ?
				 5. 获取执行sql语句的对象 PreparedStatement
					5.1 给?号赋值
						* 方法：setXxx(参数1，参数2)
						  参数1 ：？的位置编号，从1开始
						  参数2 ：？的值
				 6. 执行sql，结束返回结果
				 7. 处理结果
				 8. 释放资源
		 
		 
 ## 抽取JDBC工具类 ： JDBCutils
	*目的：简化书写
	*分析：
		1.注册驱动
		2.抽取一个方法连接对象
			*需求：不想传递参数(麻烦)，还得保证类的通用性
			*解决：配置文件
				jdbc.properties
				url=
				user=
				password=
				
	* 练习：
		需求：
		1.通过键盘录入用户名和密码
		2.判断用户是否登录成功
		 * select * from 表名 where 列中的用户名 = ‘’ and 列中的密码 = ‘’;
		 * 如果这sql语法查询有，则成功，否则失败


 ## JDBC事务管理：
	* 事务：一个包含多个步骤的业务操作，要么同时成功，要么同时失败。
	* 操作：使用PreparedStatement对象来解决
		1.开启事务：setAutoCommit    调用该方法设置参数为fales，即开启事务
			* 在执行sql之前开启事务
		2.提交事务：commit
			* 当所有sql都执行完提交事务
		3.回滚事务：rollback
			* 在catch中回滚事务
		
		