 ##今日内容：
	1.Servlet
	2.HTTP协议
	3.Request
	
	
 ## Servlet：
		1.概念
		2.步骤
		3.执行原理
		4.生命周期
		5.Servlet3.0注解
		6.Servlet的体系结构
			servlet -- 接口
			   |
			GenericServlet -- 抽象类
				|
			HttpServlet -- 抽象类

		* GenericServlet：将Servlet的接口其它的方法做了默认实现，只将service()方法作为抽象
			* 捡来定义Servlet类是，可以继承GenericServlet，实现servlet()方法即可
			
			* HttpServlet:对http写的一种封装，并简化操作
				1.定义类继承HttpServlet
				2.覆写doGet/doPost方法
			
		7.Servlet相关配置：
			1.urlpartten：servlet访问路径
				1.一个servlet可以定义多个访问路径： @WebServlet({"/d","/dd","/ddd"})
				2.路径定义规则：
					1./xxx
					2./xxx/xxx：多层路径，目录结构
					3. *.do：可扩展名匹配
					
 ##HTTP协议：
	* 概念：Hyper Text Transfer Protocol 超文本传输协议
		* 传输协议：定义类，客户端和服务器端通讯时，发送数据的格式
		* 特点：
			1.基于TCP/IP的高级协议
			2.默认端口号：80
			3.基于请求/响应模型的：一次请求对应一次响应
			4.无状态：每次请求之间相互独立，不能交互数据
			
		* 历史版本：
			* 1.0：每一次请求响应都会建立新的连接
			* 1.1：复用连接
			
	* 请求消息数据格式
		1.请求行：
			请求方式 请求url 请求协议/版本
			GET / inloge.html HTTP/1.1
			
			* 请求方式：
				* HTTP协议有7种请求方式，常用有2种
						* GET：
							1.请求参数在请求行中，在url后
							2.请求的url长度有限制的
							3.不太安全
							
						* Post：
							1.请求参数在请求体中
							2.请求的url长度没有限制的
							3.相对安全
		
		2.请求头：客户端浏览器高数服务器一些信息	
			请求名称：请求头值
				*常见的请求头：
					1.User-Agent ：浏览器高数服务器末尾访问你使用的浏览器版本信息
						*可以在服务器端获取该头的信息，解决浏览器的兼容性问题
					2.	Referer  =	http://127.0.0.1/inloge.html
						* 高数服务器，我(当前请求)从哪里来？
							*作用：
								1.防止盗链
								2.记录工作
		3.请求空行
			空行
		4.请求体(正文)
			
			Accept =	text/html,application/xhtml+xm…ml;q=0.9,image/webp,*/*;q=0.8
			Accept-Encoding =	gzip, deflate
			Accept-Language	 =  zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
			Connection =	keep-alive
			Content-Length	= 12
			Content-Type =	application/x-www-form-urlencoded
			Cookie	=  JSESSIONID=A6090CC7BF477DEBC905913AA1043926
			Host  =	127.0.0.1
			Origin =	http://127.0.0.1
			Referer  =	http://127.0.0.1/inloge.html
			Upgrade-Insecure-Requests =	1
			User-Agent  =	Mozilla/5.0 (Windows NT 10.0; …) Gecko/20100101 Firefox/76.0
				
	* 响应消息数据格式
 
 ## Request:
	1.request对象和response对象的原理
		1.request和response对象是有服务器创建的，我们来使用它们。
		2.reques对象是来获取请求消息的，response对象是来设置响应消息的
		
	2.request对象继承体系结构：
		ServletRequest --接口
				|  继承
		HttpServletRequest  -- 接口
				|
		org.apache.catalina.connector.RequestFacade --类(tomcat)
	
	3.request功能：
		1.获取请求消息数据
			1.获取请求行数据
				* GET /day14/dome?name=zhangsan HTTP/1.1
				* 方法：
					1.获取请求方式：GET
						* string getMethod();
					2.(重点记忆)获取虚拟目录：/day04	
						* string getContextPath();
					3.获取Servlet路劲：/dome
						* string getServletPath();
					4.获取get方式请求参数：name=zhangsan
						* string getQueryString();
					5.(重点记忆)获取请求的URL：/day4/dome
						* string getRequestURI();		-- /limi_war_exploded/Servletdome
						* stringBuffer getRequestURL();	-- http://localhost:8080/limi_war_exploded/Servletdome
						 
						* URI：/limi_war_exploded/Servletdome                            例如：URI是共和国  (URI等级高于URL)
						* URL：http://localhost:8080/limi_war_exploded/Servletdome				URL是中华人民共和国
					6.获取协议及版本：HTTP/1.1
						* string getProtocol()
					7.获取客户机的IP地址：
						* string getRemoteAddr();
	
			2.获取请求头数据
				* 方法：
					* (重点记忆)String	getHeader(String name) ：通过请求头的名称获取请求头的值
					* Enumeration<String>	getHeaderNames() ：获取所有的请求头名称
					
			3.获取请求体数据
				* 请求体：只有POST请求方式，才有请求体，在请求体重封装了POST请求的请求参数
				* 步骤：
					1.获取流对象
						* BufferedReader getReader()   ：获取字符输入流，值能操作字符数据
						* ServletInputStream getInputStream()  ：获取字节输入流，可以操作任意数据类型。
							* 在文件上传只是点讲解
					2.在从流对象中拿数据
					
		2.其它功能	：
			1.获取请求参数通用方式：无论是GET还是POST请求方式都可以使用下列方法来请求参数
				1. String getParameter(String name)  :根据参数名称获取参数值， username=zhengsan
				2. String[] getParameterValues(String name)  ：根据参数名称获取参数值的数组 hobby=xxx%hobby=game
				3. Enumeration<String> getParameterNames()  ： 获取所有请求的参数名称，就是name属性
				4. Map getParameterMap() ：获取所有参数的ma集合
 
				* 中文乱码问题：
					* get方式： tomcat 8 已经将get方法乱码问题解决了
					* post方式：会乱码
						* 解决：在获取参数前，设置request的编码request.serCharacterEncoding("UTF-8");
			2.请求转发：一种在服务器内部的资源跳转的方式
				1.步骤：
					1. 通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)  
					2.使用requestDispatcher对象来进行转发：void forward(ServletRequest request, ServletResponse response)  
					
				2.特点：
					1.浏览器地址栏不会发生变化
					2.只能转发到当前服务器内部资源中。
					3.转发是一次请求
			3.共享数据：
				* 域对象：一个作用范围的对象，可以在范围内共享数据
				* request域：代表一次请求的范围，一帮用于请求转发的多个资源中共享资源
				* 方法：	
					1. void setAttribute(String name, Object o)  ：储存数据
					2. void removeAttribute(String name) ：通过键取出键值对
					3. Object getAttribute(String name)   ：通过键获取值
			4.获取ServletContext
				* ServletContext request.getServletContext();
	
	
	
	
	##案例：用户登录 
		* 用户登录案例需求：
			1.编写login.html登录页面
				username&password连个输入框
			2.使用Druid数据库连接池技术，操作mysql，day14数据库中的user表
			3.使用JDBCTemplate技术封装JDBC
			4.登录成功条状到SuccessServlet展示：登录成功！用户名，欢迎您！
			5.登录失败跳转到FailServlet展示：	登录失败，用户名或密码错误，请重试！
			
			
			
	##BeanUtils：把获取的用户数据的集合和表的实体对象自动封装
		* 用于封装JavaBean的
		1.JavaBean：标准的java类
			1.要求：
				1.类必须内public修饰
				2.必须提供空城的构造器
				3.成员变量必须使用Private修饰
				4.提供公共setter和getter方法
			2.功能：封装数据	
			
		2.概念：
			成员变量：
			属性：setter和getter方法截取后的产物
				李荣：getUsername() -- > Username -- > username
		
		3.方法：
			1.setProperty(); 给对象设置值
			2.getproperty(); 获取对象对应的值
			3.populate(Object obj , Map map); 将map集合的键值对信息，封装到对应的JavaBean对象中
		
		
		如：//BeanUtils类简化代码
			//获取用户输入的数据map集合
			Map<String, String[]> map = request.getParameterMap();
			//创建一个空对象接收数据
			User loginUser = new User();

			try {
				//使用BeanUtils类中的populate方法自动封装。
				BeanUtils.populate(loginUser,map);
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			} catch (InvocationTargetException e) {
				e.printStackTrace();
			}
			
	