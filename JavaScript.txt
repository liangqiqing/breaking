
 ## 今日内容
	1.JavaScript基础
	
## JavaScript:
		*概念：一门客户端脚本语言
			* 运行在客户端浏览器中的，每一个浏览器都有javaScript的解析引擎
			* 脚本语言：不需要便器，直接就可以被浏览器解析执行了
		
		* 功能：
			* 可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验。
	
		* JavaScript发展史：
			1.1992年，Nombase公司，开发出第一门客户端脚本语言，专门用于表单的校验。命名为：c-- ，后来更名SeriptEase
			2.1995年，Netscape(网景)公司，开发出一门客户端脚本语言：LiveSeript。后来，请SUN公司的专家，修改LiveScript，命名为JavaScript
			3.1996年，微软公司抄袭JavaScript开发出JScript语言
			4.1997年，ECMA(欧洲计算机制造商协会)，ECMAScript，就是所有脚本语言的标准。
			
			* JavaScript = ECMAScript+ JavaScript自己特有的东西(BOM+DOM)
			
		* ECMAScript
			1.基本语法：
				1.与html结合方式
					1.内部JS：
						* 定义<script>,标签体内容就是JS代码
					2.外部JS：
						* 定义<script>,通过src属性引入外部JS文件
					* 注意：
						* 1.<script>可以定义在html也秒的任何地方。但是定义的位置会影响之下顺序。
				2.注释
					1.单行注释：// 注释内容
					2.多行注释：/*注释内容  */ 
				3.数据类型
					1.原始数据类型(基本数据类型)
						1.number：数字。整数/小数/NaN(not a number：一个不是数字的数字类型)
						2.string：字符串。 字符串"abc" "a" 'abc'
						3.boolean： true或false
						4.null：一个对象为空的占位符
						5.underined：未定义。如果一个变量没有个初始赋值，则会默认为undefined
					2.引用类数据类型：对象
				4.变量
					* 变量：一小块存储数据的内存空间
					* Java语言是强类型语言，而JavaScript是弱类型语言。
						* 强类型：在开辟内存空间是，定义了空间建立存储的数据的数据类型。只能存储固定类型的数据
						* 弱类型：在开辟内存空间是，不定义空间将来的存储的数据类型，可以存放任何类型的数据。
					* 语法：
						* var 变量名 = 初始化值;
				5.运算符
					1.一元运算符：只有一个运算术的运算符
						++，--，+(正号)，-(负号)
						* ++ , -- : 自增(自减)
						* ++(--):在前，先自增(自减)，再运算
						* ++(--):在后，先运算，再自增(自减)
						
						*+(-)：正负号
						*注意：在JS中，如果运算数不是运算符所要求的类型，那么JS引擎会自动的将运算数进行类型转换
							* 其它类型转number：
								* string转number：按照字面转换。如果字面值不是数字，则转为NaN(不是数字的数字)
								* booleac转number：true为1 ， false为0
					2.算数运算符
						+，-，*，/，%....
					3.赋值运算符
						=，+=，-=，*=，/=....
					4.比较运算符
						> , < , >= , <= , == , ===(全等于)
						* 比较方式：
								1.类型相同，直接比较
					               * 字符串，按照字典比较。按位比较，直到得出大小为止。
								2.类型不同。先进行类型转换，在比较 
					              * === ，全等于。在比较之前，先判断类型，如果类型不相同，则直接返回false
					5.逻辑运算符
						&& || ！
						* && ：与 （短路）
						* || ：或 （短路）
						*  ！：非
							* 其他类型转boolean：
								1.number： 0或NaN为假，其它为真
								2.string：除了空字符串("")，其它都是true
								3.null & undefined ：都是false
								4.对象，所有的对象都为true
					6.三元运算符
						? :
						* 语法：
							* 表达式？ 值1：值2
							* 判断表达式的值，如果是true则取值1，false则取值2；
				6.流程控制语句
					1. if...else...
					2. switch：
						* 在java中，switch语句可以接收的数据类型：byte int shor char ，枚举(1.5版本后)，string
						* 在JS中，switch语句可以接收任意的元素数据类型
					3. while
					4. do...while
					5. for
				
			2.基本对象：
				Function：
					1.创建：
					 *        1. var fun = new Function(形式参数，方法体); 看看就好没必要记忆
					 *        2. function 方法名称 (形式参数){
					 *            方法体
					 *        }
					 *         3.var 方法名称 = new Function(形式参数){
					 *             方法体
					 *         }
					 *     2. 方法：
					 *     3.属性：
					 *        length：代表形式参数的个数
					 *     4.特点：
					 *          1. 方法定义是，形式参数的类型不用写，返回值类型也不写。
					 *          2. 方法是一个对象，如果定义名称仙童的方法。会覆盖
					 *          3. 在JS中，方法的调用只是与方法的名称有关，和参数列表无关
					 *          4. 在方法声明中有一个应酬的内置对象(数组)，arguments，封装所有的实际参数
					 *       5. 调用：
					 *             方法名称(实际参数列表);
				Array：
					 *      1.创建：
					 *          1. var arr = new Array(元素列表);
					 *          2. var arr = new Array()默认长度;
					 *          3. var arr = [元素列表];
					 *      2. 方法
					 *              join(参数) ; 将数组中的元素按照指定的分隔符拼接为字符串。
					 *              push(); 向数组的末尾添加一个或更多元素，并且返回新的长度。
					 *    3.属性
					 *              length;数组的长度
					 *    4.特点
					 *              1. 在JS中，数组元素的类型可变。
					 *              2. 在JS中，数组长度可变。
				Boolean
				Date
					*      1.创建：
					*          var date = new Date();
					*      2. 方法：
					*          toLocaleString();返回当前date对象对应的时间本地格式
					*          getTime();获取毫秒值。返回单倩如期对象描述的时间到1970年1月1日零点的毫秒值
				Math
					*      1. 创建：
					*          Math 作为对象使用就可以调用其所有属性和方法,所以无需创建它
					*      2.属性：
					*          PI：圆周率
					*      3.方法：
					*          1.ceil(x)	对数进行上舍入。
					*          2.floor(x)	对数进行下舍入
					*          3.round(x)	把数四舍五入为最接近的整数。
					*          4.random()	返回 0 ~ 1 之间的随机数。 包含0不包含1  公式：(0,1]
				Number
				String
				RegExp :正则表达式对象
					* 正则表达式：定义字符串的组成规则。
					1.单个字符：[]
						如：[a] [ab](a或b的意思) [a-zA-Z0-9_]
						* 特殊符号代表特殊含义的单个字母：
							\d:单个数字字符[0-9]
							\w:单个单词字符[a-zA-Z0-9_]
					2.量词符号：
						?:表示出现0次或1次
						*:表示出现0次或多次
						+:表示出现1次货多次
						{m，n}：表示 m<= 数量 >=n
							* m如果缺省：[,n]:最多n次
							* n如果缺省：[m,]:最少m次
					 3.开始结束符号：
						1.^ :开始符号
						2.$ :结束符号
					2.正则对象：
						1.创建：
							1. var reg = new RegExp(正则表达式);
							2. var reg = /正则表达式/;
						2.方法：
							test();用于校验字符串是否按照正则表达式书写
						
				Global
					1.特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。方法名();
					2.方法：
						 *          encodeURI(); uri编码
						 *          decodeURI(); uri解码
						 *
						 *          encodeURIComponent(); uri编码
						 *          decodeURIComponent();  uri解码
						 *
						 *          parseInt(); 将字符串转为数字
						 *              * 逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为number
						 *
						 *          eval();  将 JavaScript 字符串，并把它作为脚本代码来执行
						 *
						 *          isNaN();  判断一个值是否是NaN
						 *              * nAn六亲不认，连自己都不认。 NaN参与的==比较全为false
		* BOM :
			1.概念：Browser Object Model 浏览器对象模型
				* 将浏览器的各个组成部分封装成对象
			2.组成：
				Window ：窗口对象
					     *      1.创建
						 *      2.方法:
						 *          1.与弹出框有关的方法：
						 *              alert()	显示带有一段消息和一个确认按钮的警告框。
						 *              confirm()	显示带有一段消息以及确认按钮和取消按钮的对话框。
						 *                  * 如果点击确定，返回true
						 *                  * 如果点击取消，返回false
						 *              prompt()	显示可提示用户输入的对话框。
						 *                  * 返回值获取用户输入的值
						 *           2.与打开关闭有关的方法：
						 *              close() 关闭浏览器窗口
						 *                  * 谁调用我，我就关谁
						 *              open() 打开一个新的浏览器窗口
						 *                  * 返回一个新的window对象
						 *            3.与定时器有关的方法：
						 *              setTimeout()  在指定的毫秒数后调用函数或技术表达式。
						 *                  * 参数：
						 *                      1.js代码或者方法的对象
						 *                      2.毫秒值
						 *                   * 返回值，文艺标识，用于取消定时器
						 *              clearTimeout() 取消有setTimeout()方法设置的timeout。
						 *
						 *              setInterval() 按照指定的周期(以毫秒值)来调用函数或技术表达式。
						 *                * 参数：
						 *                      1.js代码或者方法的对象
						 *                      2.毫秒值
						 *                   * 返回值，文艺标识，用于取消定时器
						 *              ClearInterval() 取消由 setInterval() 设置的 timeout。
						 *      3.属性:
						 *          1.获取BOM的其他对象
						 *              history		对 History 对象的只读引用
						 *              location	用于窗口或框架的 Location 对象
						 *              Screen		对 Screen 对象的只读引用
						 *              Navigator	对 Navigator 对象的只读引用
						 *
						 *          2.获取DOM对象
						 *              document	对 Document 对象的只读引用
						 *      4.特点：
						 *          *  window对象不需要创建对象就可以直接使用。如： window.方法名();
						 *          *  window引用可以省略。方法名();
				Navigator：浏览器对象
				Screen：显示器屏幕对象
				History：历史记录对象
					1.创建(获取)：
						1.window.history
						2.history
						
					2.方法：
						* back()    加载 history列表中的前一个URL.
						* forward() 加载 history列表中的下一个URL。
						* go(参数)  加载 history列表中的某个具体页面。
							* 参数：
								* 正数：前进几个历史记录
								* 负数：后退几个历史记录
					3.属性:
						* lenth  返回当前窗口历史列表的URL数量.
				Location：地址栏对象
					1.创建：
						* Location 对象是 Window 对象的一个部分，可通过 window.location 属性来访问。
					2.方法：
						* reload()	重新加载当前文档。
					3.属性：
						* href	设置或返回完整的 URL。
						
			 * BOM简单学习：为了满足案例要求
				* 功能： 控制html文档的内容
				* 代码： 获取页面标签(元素)对象 Element
					* document.getElementById("id值")：通过元素的id获取元素对象
				* 操作Element对象：
					1.修改属性值：
						1.明确获取对象是哪一个？
						2.查看API文档，找其中有哪些属性可以设置
					2.修改体标签内容：
						* 属性：InnerHTML
		

		* DOM	
			* 概念：Document Object Model 文档对象模型
				* 将标记语言组成的各个部分，封装为对象。可以使用这些对象，对标记语言文档进行CRUD的动态操作
				
			* w3c DOM 标准被分为3个不同部分：

				* 核心 DOM- 针对任何结构化文档的标准模型
					* Document：文档对象
					* Element：元素对象
					* Attribute：属性对象
					* Comment：注释对象
					* Text：文本对象
					
					* Node：节点对象，其他5个的父对象
				* XML-DOM - 针对XML文档的标准模型
				* HTML-DOM - 针对HTML档档的标准模型
		
			
		* 核心DOM模型：
				* Document：文档对象
					1.创建(获取)：在html dom模型中可以使用window对象来获取
						1.window.document
						2.document
					2.方法：
						1.获取Element对象：
							1.getElementById(): 根据id值回去元素对象。id属性值一般唯一
							2.getElementsTagName():根据元素名称获取元素对象们，返回值是一个数组
							3.getElementsByClassName():根据Class属性值获取元素对象们，返回值是一个数组
							4.getElementsByName():根据name属性值获取元素对象们，返回值是一个数组
						2.创建其它DOM对象：
							createAttribute(name)	创建拥有指定名称的属性节点，并返回新的 Attr 对象。
							createComment()	创建注释节点
							createElement()	创建元素节点。
							createTextNode()	创建文本节点。
							
					3.属性：	
				* Element：元素对象
					1.获取/创建：通过document来获取和创建
					2.方法：
						1.removeAttribute():删除属性
						2.setAttriBute():设置属性
				* Node：节点对象，其他5个的父对象
					* 特点：所有DOM对象都可以被认为是一个节点
					* 方法：
						* CRUD DOM树
							* appendChild(): 向节点的子节点列表的结尾添加新的节点。
							* removeChild(): 删除(并返回) 当前节点的指定子节点。
							* replaceChild(): 用一个新的节点替换一个节点。
					*属性：	
						* parentNode ： 返回节点的父节点。
						
		* HTML-DOM		
			1.标签体的设置和获取：innerHTML
			2.使用html元素对象的属性
			3.控制元素样式
				1.使用元素的style属性来设置
				2.提前定义好类选择器，通过元素的className属性来设置器class属性值。
			
			
			* 事件
				* 事件简单学习：
					* 功能：：某些组件被执行类某些操作后，如法某些代码的执行。
				* 如何绑定事件
					1.直接在html标签上，指定事件的属性(操作),属性值就是JS代码
							1. 事件：onclick --> 单击事件
					2.通过JS获取元素对象，指定事件的属性，设置一个函数	
				
	## 事件监听机制：
		* 概念：某些组件被执行类某些操作后，触发某些代码的执行。
			* 事件：某些操作。如：单击，双击，键盘按下类，鼠标移动了
			* 事件源：组件。如：按钮， 文本输入框...
			* 监听器：代码。
			* 注册监听：监事及，事件源，监听器结合在一起。当事件源上方法类某个事件，则触发执行某个监听器代码。
			
		* 常见事件：
			1.点击事件：
				1.onclick ：点击事件
				2.ondblclick ：双击事件
			2.焦点事件：
				1. onblur ：失去焦点
				2. onfocus ：元素获得焦点
			3.加载事件：（重点）
				1. onload ：一张页面或一幅图像完成加载。
			4.鼠标事件：
				1.onmousedown ：鼠标按钮被按下。
				2.onmouseup ：  鼠标按键被松开。
				3.onmousemove： 鼠标被移动。
				4.onmouseover： 鼠标移到某元素之上。
				5.onmouseout ： 鼠标从某元素移开
			5.键盘事件：
				1.onkeydown ： 某个键盘按钮被按下。
				2.onkeyup ： 某个键按钮被松开。
				3.onkeypress ： 某个键盘按钮被按下并松开。
			6.选择和改变：
				1.onchange ： 域的内容被改变。
				2.onselect：  文本被选中。
			7.表单事件：	
				1.onsubmit ：确认按钮被点击。(重点记忆)
				2.onreset： 重置按钮被被点击。
					