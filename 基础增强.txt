# 今日内容
         1.Junit单元测试
         2.反射
         3.注解

##Junit单元测试：
  *测试分类：
	1.黑盒测试：不需要写代码，给输入值，看程序是否能够输出期望的值。
	2.白盒测试：需要写代码的。关注程序具体的执行流程。

Junit使用：白盒测试
        *步骤：
 	1.定义以一个测试类(测试用例)
		*建议：
		   *测试类名：被测试的类名+Test  例如：xxxxTest
		   *包名：xxx.xx.xx.test  例如：Liang.Qi.Qing.test


	2.定义测试方法：可以独立运行
		 *建议：
		     *方法名：test+测试的方法名 例如：testAll
		     *返回值：void
		     *参数列表：空参

	3.给方法加@Test
	4.导入junit依赖环境

          *判定结果：
	*红色：失败
	*绿色：成功
	*一般我们会使用断言操作处理结果
		* Asssert.assertEqeals(期望的值,运算的值);

           *补充：
	*@Before：
	       * 在修饰的方法会在测试方法之前被自动执行
	*@After ：
	        *在修饰的方法会在方法执行后自动被执行

##反射：框架设计的灵魂
 	* 框架：半成品软件。可以在框架的基础上进行软件开发，简化编码。
	* 反射：将类的各个部分封装为其他对象，这就是反射机制
	       * 好处：
		1.可以在抽象运行过程中，操作这些对象。
		2.可以解耦，提高程序的可扩展性。

       * 获取class对象的方式：
	1.class.forName("全类名"):将字节码文件加载进内存，返回class对象
	      * 多用于配置文件，将类名定义在配置文件中。读取文件，加载类
	2.类名。class：通过类名的属性class获取
	      *多用于参数的传递
	3.对象。geiClass():getClass()方法在Object类中定义着。
	      *多用于对象的获取字节码的方式

	* 结论：
	      同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪种法式获取的class对象都是同一个。

    *class对象功能：
	* 获取功能：
	      1.获取成员变量们
	         * Field[] getFields()  //该方法只能获取被public修饰的成员变量
	         * Field getField(String name)  //获取一个被public修饰符修饰的指定变量，如果传递的参数不存在就会抛异常NoSuchFieldException

                           *Field getDeclaredField(String name)  //可以获取多个被任意修饰符修饰的Class对象成员变量
                           *Field[] getDeclaredFields()  ////可以获取一个任意修饰符的class对象成员变量	
	      2.获取构造方法们   
                           *Constructor<?>[] getConstructors()  //获取类中多个被public修饰的构造方法
                           *Constructor<T> getConstructor(类<?>... parameterTypes)//获取类中单个被public修饰的构造方法

                           *Constructor<?>[] getDeclaredConstructors()  //可以读取多个任意等级修饰符修饰的构造方法
                           *Constructor<T> getDeclaredConstructor(类<?>... parameterTypes)  //可以读取单个任意等级修饰符修饰的构造方法
	      3.获取成员方法们
                           *method[] getMethods()  
                           *method getMethod(String name, 类<?>... parameterTypes)  

                           *method[] getDeclaredMethods()  
                           *method getDeclaredMethod(String name, 类<?>... parameterTypes)  
	      4.获取类名
                           *String getName()  

      * Field：成员变量：
	 * 操作：
		1.设置值：
		      void set(Object obj, Object value)  
	  	2.获取值
		   Object get(Object obj)  
		3.忽略访问权限父的安全检查
		   setAccessible(true);//暴力反射

           *Constructor ：构造方法
	       * 创建对象：
		* T newInstance(Object... initargs)  

		* 如果使用空参数构造方法创建对象，操作可以简化： class对象中的newinstance方法
           * Method：方法对象
	* 执行方法 ：
	      * Object invoke(Object obj, Object... args) 

	* 获取方法名称：
		String getName()  ：获取方法名 

        * 案例：
             * 需求：写一个"框架"，在不改变任意代码前提下,可以帮我们创建任意类型的对象，并且执行其中任意方法
	*实现：
		1.配置文件
		2.反射
	* 步骤：
	      1. 将需要创建的对象的全类名和需要执行的方法定义在配置文件中
	      2. 在程序中加载配置文件
	      3. 使用反射技术来加载类文件进内存
	      4. 创建对象
	      5. 执行方法

##3.注解：
   * 概念：说明程序的。给计算机看的
   * 注释：用文件中描述程序的，给程序员看的

   * 定义：注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5版本引入的一个特性，与类、接口、枚举是同在一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。

   * JDK1.5之后的新特性
   *.说明程序的
   * 使用注释：@注释名称

   * 作用分类：
	①编写文档：通过代码里表识的注解生产文档【生成文档doc文档】
	②代码分析：通过代码里表识的注解对代码进行分析【使用反射】	
	③编译检查：通过代码类的标识让编译器能够实现基本的编译检查【Override】

    * JDK中预定义的一些注解
	* @Override - 检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。
	* @Deprecated - 标记过时方法。如果使用该方法，会报编译警告。
	* @SuppressWarnings - 指示编译器去忽略注解中声明的警告。
		*一般传递参数all  @SuppressWarnings("all")

    *自定义注解 
            * 格式：
	元注解
	pubilc @interface 注解名称{
                    属性列表；
                 }

            * 本质：注解本质上是一个接口，该接口默认继承Annotation接口
	*public interface in.annotation.MyAnnr extends java.lang.annotation.Annotation {}
	
             * 属性：接口中的抽象方法
	* 要求：
	     1. 属性的返回值类型由下列取值
		* 基本数据类型
		* String
		* 枚举
		* 注解
		* 以上类型的数组

	     2.定义了属性，在使用时需要给属性赋值
		1.如果定义属性是，在使用default关键字给属性默认赋值，则使用注解是，可以不进行属性的赋值。
		2.如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略。直接定义值即可。
		3.数组赋值是，知识与{}包裹。果果数组中只有一个值，则{}省略。

	* 元注解：用于描述注解的注解
		*@Target：描述注解能够作用位置
		      * ElementType取值：
			* TYPE：可以作用于类上
			* METHOD ：可以作用于方法上
			* FIELD ：可以作用于成员变量上
		      * Retention ：描述注解被保留的阶段
			* @Retention（RetentionPolicy.RUNTIME）:当前被描述的注解，会保留到class字节码文件中，并被JVM读取到
		      * @Documented：描述注解是否被抽取到api文档 中 
		      *@Inherited：描述注解是否被子类继承 

    *在程序使用（解析）注解 ：获取注解中定义的属性值
	1.获取注解定义的位置的对象 （Class，Method，Field）
	2.获取指定的注解
	      *getAnnotation（Class类型的参数）
	3.调用注解中的抽象方法获取配置的属性值


       * 小结：
	1.以后大多数的时候，我们第一回使用注解，而不是自定义注解
	2.注解给谁用？
		1.编译器
		2.给解析程序用
	3.注解不是程序的一部分，可以理解为注解就算一个标签
