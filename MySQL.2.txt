 # 今日内容
	

    1. DQL ：查询语句
          1. 排序查询
          2. 集合函数
          3. 分组查询
          4. 分页查询

     2. 约束
     3. 多表之间的关系
     4. 范式
     5. 数据库的备份和还原

 ## DQL ：查询语句
          1. 排序查询
	* 语法：order by 字句
		order by 列名， 排序方法，列2 排序方法......

	*排序方法：
	 	* asc : 升序，默认的
		* desc ：降序。

	* 注意：
	     * 如果有多个排序条件，则当前的条件一样，才会判断第二条件。
          2. 集合函数 ：将一列数据作为一个整体，进行纵向的计算。
	1. count ： 计算个数
	2. max ： 计算最大值
	3. min ： 计算最小值
	4. avg ： 计算平均分
	5. sum ：计算总和
	* 注意： 聚合函数的计算，排除null值。
	    解决方案：
		1.  选择不包含非空的列进行计算
		2. 使用 ifnull 函数
		
          3. 分组查询 ：
	1. 语法：group by分组字段；
	2. 注意：
	    1. 分组之后查询的字段：分组字段、聚合函数
	    2. where 和 having 的区别？
	         1. where 是在分组前进行限定，如果不满足条件，则不参与分组。
	            1.1. having 是在分组后进行限定，如果不满足条件，则不会被查询出来。
	         2. where 后不可以跟聚合函数，having 可以进行稽核函数的判断。
          4. 分页查询
	1. 语法 ： limit 开始索引，每页查询的条数；
	2. 公式 ： 开始索引 = （当前的页码 - 1） * 每页显示的条数
	3. limit 语法是一个MySQL“方言”

## 约束：
       * 概念：对表中的数据进行限定，保证数据的正确性，有效性和完整性。
       * 分类：
	1 .  主键 ：primary key
	2 .  非空约束： not  null
	3 .  唯一约束： unique
	4 .  外键约束：forign key

	** 非空约束： not  null
		* 创建表的时候添加
		   * create table 表名(列名 列型+非空约束 ... );
                                        
		* 修改表中的数据类型添加
		   * alter table 表名 (change 或 modify) 列名  列型+非空约束 ;

		* 删除非空约束	
		   * alter table 表名 (change 或 modify) 列名  列型;
	
         **  唯一约束： unique :值不能重复
		* 创建表是添加
		create table 表名(列名 列型+唯一约束);
		* 创建表后添加
		 alter table 表名 (change 或 modify) 列名  列型+唯一约束 ;
 		* 删除唯一约束
		alter table 表名 drop index  唯一约束所在的列名;
		* 注意mysql中，唯一约束限定的列值的值可以有多个null

         **  主键 ：primary key  只能有一列是主键是非空且唯一的。
	1. 注意：
	    1. 含义 ： 非空唯一
	    2. 一张表只能有一个字段为主键
	    3. 主键就是表中记录的唯一表标识
	2. 在创建标识添加主键约束
	      create table 表名 (列名 列型+主键约束);
	3. 删除主键约束
	     alter table 表名 drop 主键约束(primary key) ;
	4. 创建表之后添加主键约束
	     alter table 表名 （change 或 modify）列名  列型+主键约束 ;
	5.自动增长：
	    1. 概念 ：如果默一系列是数值类型的，使用 auto_increment 可以完成自动增长
	    2. 在创建表时，添加主键约束，比完成主键自增长
		create table 表名(列名 列型+主键约束（primary key）+自动增长（auto_incrtrement）) ;
	    3. 删除自动增长
		alter table 表名（change 或 modify）列名 列型；
	    4. 添加自动增长
		alter table 表名（change 或 modify）列名 列型+自动增长（auto_inctrement）; 
         
         ** 外键约束 ： foreign key，让表与表之间产生关系，从而保证数据的正确性。
	    1.在创建表时，可以添加外键
	       create table 表名(列名 列型 .... constraint 自定义外键名  foreign key (想要绑定的外键列名) 
                             references 主表名（一般写主键列的名称) );
	    2.删除外键
	        alter table 表名 drop foreign key 自定义外键名 ;
	    3. 创建表之后，添加外键
	       alter table 表名  add  constraint  (自定义外键名) foreign key （要绑定的列名）
		references （主表主键名）;
      ** 级联操作 ：
	1. 添加级联操作
	    语法 ： alter table 表名  add constraint 外键名称  foreign key (外键名称)
		      references 主表名(主键名)  on update cascde on delete cascade ;
	2.分类
	     1. 级联更新：on oudate  caseade
	     2. 级联删除；on delete  caseade    （级联删除会波及多个表要慎用）

 ##  数据库的设计
	
          1. 多表之间的关系
	1.一对一（了解）：
	 * 如：人和身份证
	 * 分析 ： 一个人只有一个身份证，一张身份证只能对应一个人。
	2.一对多（多对一）：
	 * 如：员工和部门
	 * 分析 ： 一个部门有多个员工，一个员工对应一个部门
	3 多对多：
	 * 如 ： 学生和课程
	 * 分析：一个学生可以选择多门课程，一个课程可以被多名学生选择
 	2.实现关系：
	    1. 一对多（多对一）：
		 * 如 ： 部门和员工
		 * 实现方式：在多的一方建立外键，指向一的一方的主主键。
	    2.多对多：	
		* 如：学生和课程
		* 实现方式：多对多关系实现需要借助第三张中间表。中间表至少包含连个字段，这连个字段作为第三		      张表的外键，分别指向两张表的主键。
	   3.一对一（了解）：
		* 如：人和身份证
		* 实现方式 ： 一对一关系实现，可以在任意一方添加唯一外键指向另一方的主键。		 	


               2.数据库设计的范式  
	* 概念：设计数据库是，需要遵循的一些规范。要遵循后边的范式要求，必须先遵循前边的所有范式要求
	    设计关系数据库是，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被不同的范式	                       ，各种范式呈递次规范，越高的范式数据库冗余越小。
	    目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式	   （BCNF）、第四范式（4NF）和第五范式（5NF又称完美范式）。
	* 分类：
	   1.第一范式（1NF）：每一列都是不可分割的原子数据项
	   2.第二范式（2NF）：在1NF的基础上，非码属性必须完全依赖于码（在1NF清除非主属性对主码的部分函		数依赖）
	    * 几个概念：
	          1.函数依赖：a-->b，如果通过A属性(属性组)的值，可以确地唯一b属性的值。则称B依赖于A
		例如：学号-->姓名 、(学号，课程)-->分数
	          2.完全函数依赖： a-->b,如果A是一个属性组，则B属性指的确定需要依赖于A属性组所有的属性值。
		例如：(学号、课程)-->分数
	      3.部分函数依赖：a-->b，如果A是一个属性组，则b属性值得确定值需要依赖于A属性组中的某些一些值即可
		例如：(学号、课程)-->姓名
	         4.传递函数依赖：a-->b，b-->c，如果通过A属性(属性组)的值，可以确地唯一的值，在通过b属性(属性组)		的值可以确定唯一c属性的值，则称cchuandi函数依赖于a。
 		例如：学号-->系名，系名-->系主任
	         5.码：如果在一张表中，一个属性或属性组，被其它所有属性完全依赖，则称这个属性(属性组)为该表的码
		例如：该表中码为：(学号、课程)
		  * 主属性：码属性组中的所有属性
		  *非主属性：处理码属性组的属性
	   3.第三范式（3NF）：在2NF的基础上，任何非主属性不依赖与其他非主属性（2NF基础上消除传递依赖）

 ## 数据库的备份和还原
	1.命令行：
	   * 语法：
	       * 备份 ： mysqldump -u用户名 -p密码 > 你想保存的路径
	       * 还原 ：
		1.登录数据库
		2.创建数据库
		3.使用数据库
		4.执行文件。 source 文件路径
	2.图形化工具：