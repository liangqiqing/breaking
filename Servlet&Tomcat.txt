
##今日内容：
	1.web相关概念回顾
	2.web服务器软件
	3.Servlet入门学习
	
 ##webxianguang
	1.软件架构
		1.c/s：客户端/服务器端
		2.b/s：浏览器/服务器端
		
	2.资源分类：
		1.静态资源：所有用户访问后，得到的结果都是一样的，称之为静态资源，静态资源可以直接被浏览器解析
			* 如：html、css、javaScript
		2.动态资源：每个用户访问先关资源后得到的结果不一样。称之为动态资源。动态资源被访问后，需要转换为静态资源，再返回给浏览器
			* 如：servlet/jsp/php/asp....
			
	3.网络通信三要素
		1.IP：电子设备(计算机)在网络中唯一标识。
		2.端口：应用程序在计算机中的唯一标识。 取值0-65536之间
		3.传输协议：
			1.基础协议：
				1.tcp：安全协议，三次握手。速度稍慢
				2.udp：不安全协议。速度快
			
 ##web服务器软件：
	* 服务器：安装了服务器软件的计算机
	* 服务器软件：接搜用户的请求，处理请求，作出响应
	* web服务器软件：接收用户的请求，处理请求，做出响应。
		* 在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目
		* web容器
		
	* 常见的java先关的web服务器软件：
		* webLogic： oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。
		* webSphere：TBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。
		* Jboss： JBOSS公司的，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。
		* Tomcat:Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet/jsp。开源的，免费的
		
	* JavaEE：Java语言在企业开发中使用的奇数规范的总和，一共规定了13项大的规范

	* Tomcat：web服务器软件
		1.下载：http://tomcat.apache.org/
		2.安装：解压压缩包即可
			* 注意：安装目录建议不要有中文和空格
		3.卸载：直接删除目录即可
		4.启动：
			* bin/startup.bat，双击运行该文件即可
			* 访问：浏览器输入：http：//localhost：8080 回车访问自己的
								http：//别人的ip：端口号 访问别人的
								
			*可能遇到的问题：
				1.黑窗口一闪而过：
					* 原因：没有正确配置JAVA_HOME环境
					* 解决方法：正确的配置JAVA_HOME环境
				2.启动报错：
					1.暴力：找到占用的端口号，并且找到对应的进程，杀死给进程
						* netstat -ano
					2.温柔：修改自身的端口号
					* conf/server.xml
					* <Connector port="8080" protocol="HTTP/1.1"
					   connectionTimeout="20000"
					   redirectPort="8443" />
					* 一般会将tomcat的默认端口号修改为80，80端口是http协议的默认端口号。
						* 好处： 在访问时，就不用输入端口号
					
		5.关闭：
			1.正常关闭：
				* bin/shutdown.bat
				* ctrl+c
			2.强制关闭：
				* 点击启动框框的x
		6.配置
			* 部署项目的方式：
				1.直接将项目放到webapps目录即可。
					* /hello：醒目你的访问路径-->虚拟路径
					* 简化部署：将醒目你达成一个war包，在将war包放置到webapps目录下。
						* war包会自动解压缩
						
				2.配置conf/server.xml文件
					* 在<Host>标签体中配置
					<Context docBase="d:\hello" path="/hehe" />
					* docBase:项目存放的路径	
					* path：虚拟目录
					
				3.在conf\Catalina\localhost创建任意文件名称的xml文件。在文件中编写
					<Context docBase="d:\hello" />
					* 虚拟目录：xml文件的名称
					
					
		* 动态项目和静态项目：
			* 目录的结构：
				* java动态项目：
					-- 项目名称：
						-- WEB-INF
							-- web.xml：该项目的核心配置文件
							-- classes目录：放置字节码文件
							-- lib目录：放置项目依赖的jar包
							
		* 将Tomcat集成到IDEA中，并且创建JavaEE的项目，部署项目。
		
 ##Servlet：server applet
	* 概念：运行在服务器端的小程序
		* servlet就是一个接口，定义类java类被浏览器访问到(tomcat识别)的规则。
		* 将来我们自定义一个类，实现servlet接口，覆写方法。
		
	* 快速入门	：
		1.创建JavaEE项目
		2.定义一个类，实现Servlrt接口
			* public class set implements Servlet
		3.实现接口中的抽象方法
		4.配置servlet
			<!--    配置路径-->
				<servlet>
					<servlet-name>Dome1</servlet-name>
					<servlet-class>in.com.web.servlet.set</servlet-class>
				</servlet>
				<servlet-mapping>
					<servlet-name>Dome1</servlet-name>
					<url-pattern>/dome1</url-pattern>
				</servlet-mapping>
				
	* 执行原理：
		1.当服务器接收到客户端的请求后，会解析请求URL路径，获取访问的Servlet的资源路径
		2.查找web.xml文件，是否有对应的<url-pattern>标签体内容。
		3.如果有，则在找到对应的<servlet-class>全类名
		4.tomcat会将字节码文件加载进内存，并且创建其对象
		5.调用其方法
	* Servlet中的声明周期 ：
		1.被创建：执行init方法，只执行一次
			* servlet声明时候被创建？
				* 默认情况下，第一次被访问时，servlet被创建
				* 可以配置执行Servlet的创建时机。
					* 在<Servlet>标签下配置
					1.第一次被访问时，创建
						* <load-on-startup>的值为负数
					2.在服务器启动时，创建
						* <load-on-startup>的值为正整数
						
			* Servlet的init方法，值执行一次，寿命一个Servlet在内存中值存在一个servlet对象，servlet是单例的
					* 多个用户同时访问时，可能存在线程安全问题。
					* 解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对其修改值。
		2.提供服务：执行service方法，执行多次
			* 每次访问Servlet是，Service方法都会调用一次
		3.被销毁：执行destroy方法，执行一次
			* Servlet被销毁执行。服务器关闭时，Servlet被销毁
			
	* Servlet3.0：
		* 好处：
			* 支持注解配置。可以不需要web.xml类。
		
		*步骤：
			1.创建JavaEE项目，选择Servlet的版本3.0以上，可以不创建web.xml
			2.定义一个类，实现Servlet接口
			3.覆写方法。
			4.在类上使用WebServlet注解，进行配置
				* @WebServlet("资源路径")
				
	## TDEA与tomcat的相关配置
		1.TDEA会为每一个tomcat部署的项目单独建立一份配置文件
			* 查看控制台的log：Using CATALINA_BASE:   "C:\Users\Administrator\AppData\Local\JetBrains\IntelliJIdea2020.1\tomcat\_bootstrap"
		
		2."工作空间项目" 和 "tomcat部署的web项目"
			* tomcat真正访问的是“tomcat部署的项目”，“tomcat部署的web项目”对应着“工作空间项目”的web目录下的所有资源
			* Web- INF目录下的资源不能被浏览器直接访问
		
		3.断点调试：使用<小虫子>启动 dubug驱动
		